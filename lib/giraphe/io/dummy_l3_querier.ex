# Copyright Â© 2016 Jonathan Storm <the.jonathan.storm@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See the COPYING.WTFPL file for more details.

defmodule Giraphe.IO.DummyL3Querier do
  @moduledoc false

  def query_addresses(target) do
    addresses =
      target
        |> NetAddr.address
        |> _query_addresses
        |> Enum.map(&NetAddr.ip/1)

    case addresses do
      [] ->
        {:error, target, :addresses, :etimedout}

      _ ->
        {:ok, target, :addresses, addresses}
    end
  end

  defp _query_addresses(target)
      when target in ["198.51.100.1", "192.0.2.2", "192.0.2.6"]
  do
    [ "192.0.2.2/31",
      "192.0.2.4/31",
      "192.0.2.6/31",
      "198.51.100.1/29",
      "198.51.100.9/29",
      "198.51.100.17/29"
    ]
  end
  defp _query_addresses("192.0.2.7") do
    [ "192.0.2.7/31",
      "192.0.2.10/31",
      "198.51.100.25/29",
      "198.51.100.33/29"
    ]
  end
  defp _query_addresses(target) when target in ["192.0.2.3", "192.0.2.8"] do
    [ "192.0.2.3/31",
      "192.0.2.8/31"
    ]
  end
  defp _query_addresses("192.0.2.9") do
    [ "192.0.2.13/30",
      "192.0.2.9/31",
      "192.0.2.10/31",
      "192.0.2.5/31"
    ]
  end
  defp _query_addresses("192.0.2.1") do
    [ "192.0.2.1/31",
      "198.51.100.1/29"
    ]
  end
  defp _query_addresses(_target) do
    []
  end

  def query_arp(target) do
    arp_cache =
      target
        |> NetAddr.address
        |> _query_arp
        |> Enum.map(fn {ip, mac} ->
          {NetAddr.ip(ip), NetAddr.mac_48(mac)}
        end)

    {:ok, target, :arp_cache, arp_cache}
  end

  defp _query_arp("192.0.2.1") do
    [ {  "192.0.2.1", "00:00:00:00:00:01"},
      {  "192.0.2.3", "00:00:00:00:00:03"},
      {  "192.0.2.7", "00:00:00:00:00:07"},
      { "192.0.2.10", "00:00:00:00:00:10"},
      { "192.0.2.20", "00:00:00:00:00:20"},
      { "192.0.2.30", "00:00:00:00:00:30"},
      { "192.0.2.40", "00:00:00:00:00:40"},
      { "192.0.2.50", "00:00:00:00:00:50"},
      { "192.0.2.51", "00:00:00:00:00:51"},
      { "192.0.2.52", "00:00:00:00:00:52"},
      { "192.0.2.53", "00:00:00:00:00:53"},
      { "192.0.2.54", "00:00:00:00:00:54"},
      { "192.0.2.55", "00:00:00:00:00:55"},
      { "192.0.2.56", "00:00:00:00:00:56"},
      { "192.0.2.57", "00:00:00:00:00:57"},
      { "192.0.2.58", "00:00:00:00:00:58"},
      { "192.0.2.59", "00:00:00:00:00:59"},
      { "192.0.2.60", "00:00:00:00:00:60"},
      { "192.0.2.70", "00:00:00:00:00:70"},
      { "192.0.2.80", "00:00:00:00:00:80"},
      { "192.0.2.90", "00:00:00:00:00:90"},
      {"192.0.2.100", "00:00:00:00:01:00"},
      {"192.0.2.101", "00:00:00:00:01:01"},
      {"192.0.2.102", "00:00:00:00:01:02"},
      {"192.0.2.103", "00:00:00:00:01:03"},
      {"192.0.2.104", "00:00:00:00:01:04"},
      {"192.0.2.105", "00:00:00:00:01:05"},
      {"192.0.2.106", "00:00:00:00:01:06"},
      {"192.0.2.107", "00:00:00:00:01:07"},
      {"192.0.2.108", "00:00:00:00:01:08"},
      {"192.0.2.109", "00:00:00:00:01:09"},
      {"192.0.2.110", "00:00:00:00:01:10"},
      {"192.0.2.120", "00:00:00:00:01:20"},
      {"192.0.2.130", "00:00:00:00:01:30"},
      {"192.0.2.140", "00:00:00:00:01:40"},
      {"192.0.2.150", "00:00:00:00:01:50"},
      {"192.0.2.160", "00:00:00:00:01:60"},
      {"192.0.2.170", "00:00:00:00:01:70"},
      {"192.0.2.180", "00:00:00:00:01:80"},
      {"192.0.2.190", "00:00:00:00:01:90"},
      {"192.0.2.200", "00:00:00:00:02:00"}
    ]
  end

  def query_physaddr(target) do
    physaddr =
      target
        |> NetAddr.address
        |> _query_physaddr
        |> NetAddr.mac_48

    {:ok, target, :physaddr, physaddr}
  end

  defp _query_physaddr(<<"192.0.2.", last :: binary>>) do
    last_two_bytes =
      last
        |> String.rjust(4, ?0)
        |> String.replace(~r/../, ":\\0")

    "00:00:00:00" <> last_two_bytes
  end

  def query_routes(target) do
    routes =
      target
        |> NetAddr.address
        |> _query_routes 
        |> Enum.map(fn {destination, next_hop} ->
          {NetAddr.ip(destination), NetAddr.ip(next_hop)}
        end)

    case routes do
      [] ->
        {:error, target, :routes, :etimedout}

      _ ->
        {:ok, target, :routes, routes}
    end
  end

  defp _query_routes("192.0.2.1") do
    [{"192.0.2.0/24", "0.0.0.0"}]
  end
  defp _query_routes("198.51.100.1") do
    [ {    "192.0.2.2/31", "0.0.0.0"},
      {    "192.0.2.4/31", "0.0.0.0"},
      {    "192.0.2.6/31", "0.0.0.0"},
      {    "192.0.2.8/31", "192.0.2.3"},
      {   "192.0.2.10/31", "192.0.2.7"},
      {   "192.0.2.12/30", "192.0.2.3"},
      { "198.51.100.0/29", "0.0.0.0"},
      { "198.51.100.8/29", "0.0.0.0"},
      {"198.51.100.16/29", "0.0.0.0"},
      {"198.51.100.24/29", "192.0.2.7"},
      {"198.51.100.32/29", "192.0.2.7"},
      {"198.51.100.40/29", "192.0.2.3"}
    ]
  end
  defp _query_routes("192.0.2.7") do
    [ {    "192.0.2.2/31", "192.0.2.6"},
      {    "192.0.2.4/31", "192.0.2.6"},
      {    "192.0.2.6/31", "0.0.0.0"},
      {    "192.0.2.8/31", "192.0.2.6"},
      {   "192.0.2.10/31", "0.0.0.0"},
      {   "192.0.2.12/30", "192.0.2.6"},
      { "198.51.100.0/29", "192.0.2.6"},
      { "198.51.100.8/29", "192.0.2.6"},
      {"198.51.100.16/29", "192.0.2.6"},
      {"198.51.100.24/29", "0.0.0.0"},
      {"198.51.100.32/29", "0.0.0.0"},
      {"198.51.100.40/29", "192.0.2.6"}
    ]
  end
  defp _query_routes("192.0.2.3") do
    [ {    "192.0.2.2/31", "0.0.0.0"},
      {    "192.0.2.4/31", "192.0.2.2"},
      {    "192.0.2.6/31", "192.0.2.2"},
      {    "192.0.2.8/31", "0.0.0.0"},
      {   "192.0.2.10/31", "192.0.2.2"},
      {   "192.0.2.12/30", "192.0.2.9"},
      { "198.51.100.0/29", "192.0.2.2"},
      { "198.51.100.8/29", "192.0.2.2"},
      {"198.51.100.16/29", "192.0.2.2"},
      {"198.51.100.24/29", "192.0.2.2"},
      {"198.51.100.32/29", "192.0.2.2"},
      {"198.51.100.40/29", "192.0.2.9"}
    ]
  end
  defp _query_routes("192.0.2.9") do
    [ {    "192.0.2.2/31", "192.0.2.8"},
      {    "192.0.2.4/31", "0.0.0.0"},
      {    "192.0.2.6/31", "192.0.2.8"},
      {    "192.0.2.8/31", "0.0.0.0"},
      {   "192.0.2.10/31", "0.0.0.0"},
      {   "192.0.2.12/30", "0.0.0.0"},
      { "198.51.100.0/29", "192.0.2.8"},
      { "198.51.100.8/29", "192.0.2.8"},
      {"198.51.100.16/29", "192.0.2.8"},
      {"198.51.100.24/29", "192.0.2.8"},
      {"198.51.100.32/29", "192.0.2.8"},
      {"198.51.100.40/29", "192.0.2.14"}
    ]
  end
  defp _query_routes(_target) do
    []
  end

  def query_sysname(target) do
    {:error, target, :sysname, :etimedout}
  end
end
